[{"/Users/bellapense/WebstormProjects/a-blog/src/index.js":"1","/Users/bellapense/WebstormProjects/a-blog/src/App.js":"2","/Users/bellapense/WebstormProjects/a-blog/src/services/reportWebVitals.js":"3","/Users/bellapense/WebstormProjects/a-blog/src/contexts/AuthContext.js":"4","/Users/bellapense/WebstormProjects/a-blog/src/hocs/dataStore.js":"5","/Users/bellapense/WebstormProjects/a-blog/src/components/login/Logout.js":"6","/Users/bellapense/WebstormProjects/a-blog/src/components/login/Login.js":"7","/Users/bellapense/WebstormProjects/a-blog/src/components/login/PrivateRoute.js":"8","/Users/bellapense/WebstormProjects/a-blog/src/components/site/misc/ScrollToTop.js":"9","/Users/bellapense/WebstormProjects/a-blog/src/components/site/ResolvePathnameWrapper.js":"10","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/PageWrapper.js":"11","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/page-layout/CMSWrapper.js":"12","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/PublishSuccess.js":"13","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/CreateArticle.js":"14","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/ConfigureAdvertisement.js":"15","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/EditExistingStandardArticle.js":"16","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/ViewDrafts.js":"17","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/ViewArticles.js":"18","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/SelectAdvertisement.js":"19","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/EditPageContent.js":"20","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/EditExistingDraft.js":"21","/Users/bellapense/WebstormProjects/a-blog/src/services/firebase.js":"22","/Users/bellapense/WebstormProjects/a-blog/src/components/site/siteFetchDataLogic.js":"23","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/standardArticleLogic.js":"24","/Users/bellapense/WebstormProjects/a-blog/src/components/site/siteLogic.js":"25","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/SiteAlert.js":"26","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/editPageLogic.js":"27","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/AdvancedEditor.js":"28","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/viewArticlesLogic.js":"29","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/ArticleListContainer.js":"30","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/CreateArticleFields.js":"31","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/viewDraftsLogic.js":"32","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/manageAdvertisingLogic.js":"33","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/cmsLogic.js":"34","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/FeaturedArticlePreview.js":"35","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/ArticleCategory.js":"36","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/ArticleTile.js":"37","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/page-layout/CMSHeader.js":"38","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Navigation.js":"39","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Sidebar.js":"40","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Footer.js":"41","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/DisplayArticle.js":"42","/Users/bellapense/WebstormProjects/a-blog/src/components/site/custom-ads/SiteBannerAd.js":"43","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/ArticleListItem.js":"44","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/Article.js":"45","/Users/bellapense/WebstormProjects/a-blog/src/components/site/custom-ads/SidebarAd.js":"46","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Header.js":"47","/Users/bellapense/WebstormProjects/a-blog/src/constants.js":"48","/Users/bellapense/WebstormProjects/a-blog/src/components/site/misc/SocialMedia.js":"49","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/CMSDashboard.js":"50","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/CMSOption.js":"51","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/ToolTipPopup.js":"52","/Users/bellapense/WebstormProjects/a-blog/src/components/site/Error404Page.js":"53","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/SelectPage.js":"54","/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/Home.js":"55","/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/SitePage.js":"56","/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/CategoryPage.js":"57","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/BannerCarousel.js":"58","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/SharePostOptions.js":"59","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/AskBeforeLeaving.js":"60"},{"size":546,"mtime":1619386574793,"results":"61","hashOfConfig":"62"},{"size":5944,"mtime":1620343113012,"results":"63","hashOfConfig":"62"},{"size":362,"mtime":1612818814955,"results":"64","hashOfConfig":"62"},{"size":988,"mtime":1620340910505,"results":"65","hashOfConfig":"62"},{"size":6121,"mtime":1620342913579,"results":"66","hashOfConfig":"62"},{"size":483,"mtime":1619398691093,"results":"67","hashOfConfig":"62"},{"size":2725,"mtime":1620341503638,"results":"68","hashOfConfig":"62"},{"size":452,"mtime":1620342948704,"results":"69","hashOfConfig":"62"},{"size":434,"mtime":1620339068411,"results":"70","hashOfConfig":"62"},{"size":3162,"mtime":1619998544598,"results":"71","hashOfConfig":"62"},{"size":1318,"mtime":1620342913594,"results":"72","hashOfConfig":"62"},{"size":794,"mtime":1620342913560,"results":"73","hashOfConfig":"62"},{"size":1916,"mtime":1619475229485,"results":"74","hashOfConfig":"62"},{"size":17760,"mtime":1620340635838,"results":"75","hashOfConfig":"62"},{"size":12195,"mtime":1620340635814,"results":"76","hashOfConfig":"62"},{"size":1667,"mtime":1620337214105,"results":"77","hashOfConfig":"62"},{"size":4411,"mtime":1620343062274,"results":"78","hashOfConfig":"62"},{"size":4528,"mtime":1619999688224,"results":"79","hashOfConfig":"62"},{"size":850,"mtime":1619810413268,"results":"80","hashOfConfig":"62"},{"size":9642,"mtime":1619813963666,"results":"81","hashOfConfig":"62"},{"size":1485,"mtime":1620337615457,"results":"82","hashOfConfig":"62"},{"size":470,"mtime":1619384496412,"results":"83","hashOfConfig":"62"},{"size":6439,"mtime":1619999667796,"results":"84","hashOfConfig":"62"},{"size":15764,"mtime":1620337445306,"results":"85","hashOfConfig":"62"},{"size":7354,"mtime":1620341439901,"results":"86","hashOfConfig":"62"},{"size":3542,"mtime":1617829341893,"results":"87","hashOfConfig":"62"},{"size":2199,"mtime":1619811527979,"results":"88","hashOfConfig":"62"},{"size":4041,"mtime":1618863005374,"results":"89","hashOfConfig":"62"},{"size":1447,"mtime":1617829341896,"results":"90","hashOfConfig":"62"},{"size":3527,"mtime":1620338313256,"results":"91","hashOfConfig":"62"},{"size":19785,"mtime":1619738941050,"results":"92","hashOfConfig":"62"},{"size":1540,"mtime":1620337760902,"results":"93","hashOfConfig":"62"},{"size":2750,"mtime":1617829341888,"results":"94","hashOfConfig":"62"},{"size":3429,"mtime":1617829341885,"results":"95","hashOfConfig":"62"},{"size":2367,"mtime":1620337013710,"results":"96","hashOfConfig":"62"},{"size":708,"mtime":1618863005388,"results":"97","hashOfConfig":"62"},{"size":4336,"mtime":1619738058245,"results":"98","hashOfConfig":"62"},{"size":1625,"mtime":1620341416361,"results":"99","hashOfConfig":"62"},{"size":2133,"mtime":1619996777636,"results":"100","hashOfConfig":"62"},{"size":3520,"mtime":1620336558969,"results":"101","hashOfConfig":"62"},{"size":1635,"mtime":1620341201727,"results":"102","hashOfConfig":"62"},{"size":4628,"mtime":1619735603818,"results":"103","hashOfConfig":"62"},{"size":1047,"mtime":1618863005391,"results":"104","hashOfConfig":"62"},{"size":2703,"mtime":1619479466196,"results":"105","hashOfConfig":"62"},{"size":4816,"mtime":1620342913570,"results":"106","hashOfConfig":"62"},{"size":995,"mtime":1618863005391,"results":"107","hashOfConfig":"62"},{"size":521,"mtime":1619996601224,"results":"108","hashOfConfig":"62"},{"size":1298,"mtime":1619808561651,"results":"109","hashOfConfig":"62"},{"size":727,"mtime":1619391794310,"results":"110","hashOfConfig":"62"},{"size":1268,"mtime":1620338980794,"results":"111","hashOfConfig":"62"},{"size":541,"mtime":1619460283936,"results":"112","hashOfConfig":"62"},{"size":1500,"mtime":1619473953286,"results":"113","hashOfConfig":"62"},{"size":520,"mtime":1619729893378,"results":"114","hashOfConfig":"62"},{"size":1146,"mtime":1619811460592,"results":"115","hashOfConfig":"62"},{"size":2125,"mtime":1619982597344,"results":"116","hashOfConfig":"62"},{"size":1975,"mtime":1619998107445,"results":"117","hashOfConfig":"62"},{"size":2783,"mtime":1620338980801,"results":"118","hashOfConfig":"62"},{"size":1512,"mtime":1620343140639,"results":"119","hashOfConfig":"62"},{"size":1713,"mtime":1620338680540,"results":"120","hashOfConfig":"62"},{"size":639,"mtime":1620340635821,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"858v8d",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"124"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"124"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"124"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"124"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"124"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"124"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"124"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"124"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"124"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"124"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"124"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"124"},"/Users/bellapense/WebstormProjects/a-blog/src/index.js",[],["260","261"],"/Users/bellapense/WebstormProjects/a-blog/src/App.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/services/reportWebVitals.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/contexts/AuthContext.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/hocs/dataStore.js",["262"],"import React, { createContext } from 'react';\n\nimport {\n    fetchAllInitialArticles,\n    fetchArticleFromURL, fetchCategoryArticles, fetchCustomAds,\n    fetchPageContent\n} from \"../components/site/siteFetchDataLogic\";\nimport {CATEGORIES} from \"../constants\";\n\n/* Initially create the empty context object for the datastore. */\nconst StoreContext = createContext({})\n\n/**\n * HOC that creates the datastore context. Contains all the functions needed to handle requests for data and storing\n * the data returned from the request. The component wrapped will initialize the store for all components it\n * renders - this should only be done once, otherwise there will be multiple instances of the store and data\n * could get out of sync.\n * @param WrappedComponent\n */\nconst createStore = WrappedComponent => {\n    return class extends React.Component {\n        state = {\n            /**\n             * Function used only to fetch all initial data when the app initializes or is refreshed. Will\n             * overwrite all previously saved data.\n             */\n            fetchInitial: () => {\n                /*  Initialize an empty object for creating the store (page wrapper will rerender every time state is\n                 *  updated, so we only want to do this once at the end).\n                 */\n                const initialState = {}\n                // Fetch all initial articles\n                fetchAllInitialArticles().then((promises) => {\n                    promises.forEach(({category, articles, lastVisible, canLoadMore}) => {\n                        initialState[category] = {\n                            mostRecent: articles,\n                            lastVisible: lastVisible,\n                            canLoadMore: canLoadMore,\n                        }\n                    })\n                    // Set initial state now that all initial data has been fetched and saved\n                    this.setState(initialState)\n                    /*\n                    // Fetch data for custom ads\n                    fetchCustomAds().then((promises) => {\n                        promises.forEach(({ad}) => {\n                            initialState[ad.type] = {\n                                imageURL: ad.imageURL,\n                                desc: ad.desc,\n                                linkURL: ad.linkURL\n                            }\n                        })\n\n                    })\n                     */\n                })\n            },\n            /**\n             * Function that will attempt to get an article from the specified collection (such as \"standard-articles\")\n             * for an article matching articleURL. If a match is found, article data will be returned in a promise, if\n             * not, the promise will be empty.\n             * @param articleURL\n             * @param collection\n             * @returns {Promise<>}\n             */\n            getArticleFromURL: async (articleURL, collection) => {\n                // Category identifiers for article data currently in the datastore\n                const categories = CATEGORIES.map(category => {\n                    return category.path\n                })\n\n                // Check all article categories to check if article is already in the datastore\n                categories.forEach(category => {\n                    this.state[category].mostRecent.forEach((article) => {\n                        if (article.articleURL === articleURL) {\n                            return article\n                        }\n                    })\n                })\n\n                // If the article is not already in the store, then attempt to fetch it\n                return await fetchArticleFromURL(articleURL, collection)\n            },\n            /**\n             * Function that will fetch page data for the specified pageURL and save it to the datastore.\n             * @param path\n             */\n            getPageData: (path) => {\n                fetchPageContent(path).then((content) => {\n                    this.setState(prevState => ({\n                        ...prevState,\n                        [path]: content,\n                    }))\n                })\n            },\n            /**\n             * Function that will fetch up to the next 10 articles for the specified category and save them to the\n             * entry for that category in the datastore, along with updated information for whether more articles\n             * exist to be loaded.\n             * @param category\n             */\n            fetchMoreArticles: (category) => {\n                fetchCategoryArticles(category, this.state[category].lastVisible).then(\n                    ({category, articles, lastVisible, canLoadMore}) => {\n                        this.setState(prevState => ({\n                            ...prevState,\n                            [category]: {\n                                mostRecent: [...prevState[category].mostRecent, ...articles],\n                                lastVisible: lastVisible,\n                                canLoadMore: canLoadMore\n                            },\n                        }))\n                    })\n            }\n        };\n\n        /**\n         * Render method that provides the store state as the context, which can be accessed in the props of the wrapped\n         * component.\n         * @returns {JSX.Element}\n         */\n        render() {\n            return (\n                <StoreContext.Provider value={this.state}>\n                    <WrappedComponent {...this.props} />\n                </StoreContext.Provider>\n            )\n        }\n    }\n}\n\n/**\n * HOC that grants wrapped component access to the datastore context. Datastore must first be initialized by the parent\n * component.\n * @param WrappedComponent\n */\nconst withStore = WrappedComponent => {\n    return class extends React.Component {\n        render() {\n            return (\n                <StoreContext.Consumer>\n                    {context => <WrappedComponent store={context} {...this.props} />}\n                </StoreContext.Consumer>\n            )\n        }\n    }\n}\n\nexport { createStore, withStore }","/Users/bellapense/WebstormProjects/a-blog/src/components/login/Logout.js",["263"],"import React from \"react\"\nimport {useAuth} from \"../../contexts/AuthContext\";\nimport {useHistory} from \"react-router-dom\";\n\nexport default function Logout() {\n    const { logout } = useAuth()\n    const history = useHistory()\n\n    React.useEffect(() => {\n        async function logoutHandler(){\n            await logout()\n            history.push('/login')\n\n        }\n\n        logoutHandler().catch(e => {\n            console.error(e)\n        })\n    }, [])\n\n    return <></>\n}\n\n","/Users/bellapense/WebstormProjects/a-blog/src/components/login/Login.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/login/PrivateRoute.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/misc/ScrollToTop.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/ResolvePathnameWrapper.js",["264"],"import React, {useEffect, useState} from \"react\";\n\nimport {useLocation, Redirect} from \"react-router-dom\";\n\nimport DisplayArticle from \"./article/DisplayArticle\";\nimport {CATEGORIES} from \"../../constants\";\n\n/* Valid paths for articles */\nconst VALID_PATHS = CATEGORIES.map(category => {\n    return category.path\n})\n\n/* The base valid length of a pathname for articles. Length is based on \"/\" within the pathname. */\nconst VALID_PATH_LENGTH = 4\n\n/**\n * This component's purpose is to start the process of resolving dynamic path names, which covers all article URLs.\n * In this component the pathname will be assessed to see if it is a potentially valid pathname for an article.\n * If it determines that the pathname could not be valid, it will automatically redirect to the 404 Error page. If\n * it determines that the pathname could be valid, pass the process on to the display component based on the type\n * of article the pathname is for.\n *\n * @returns {JSX.Element|JSX.Element}\n * @constructor\n */\nfunction ResolvePathnameWrapper() {\n    const { pathname } = useLocation()\n    // State to redirect to the 404 error page if the pathname cannot be resolved/is not formatted correctly\n    const [redirectTo, setRedirectTo] = useState(null)\n\n    /*\n    Function that destructs the current pathname and rebuilds it to determine if the pathname is potentially valid for\n    an article.\n    */\n    function resolvePathname() {\n        // Separate the pathname between '/'\n        let path = pathname.split(\"/\")\n        // Valid paths \"/category/date/article-title\"\n        let validLength = VALID_PATH_LENGTH\n\n        // path[0] should always be empty string\n        if (path[0]) {\n            setRedirectTo(\"/error-404-page-not-found\")\n            return\n        }\n\n        // path[1] should be an article category\n        let articlePathname = \"/\" + path[1]\n\n        // Now the articlePathname build should be contained within the list of valid path names\n        if (!VALID_PATHS.includes(articlePathname)) {\n            // If not, then redirect to the 404\n            setRedirectTo(\"/error-404-page-not-found\")\n            return\n        }\n\n        // Check the rest of the path - valid paths \"/category/date/article-title\"\n        if (path.length === validLength) {\n            // Light check to see if date is formatted correctly \"yyyy-mm-dd\"\n            if (path[path.length - 2].split(\"-\").length !== 3) {\n                setRedirectTo(\"/error-404-page-not-found\")\n            }\n        } else {\n            setRedirectTo(\"/error-404-page-not-found\")\n        }\n    }\n\n    /* This effect will run when the pathname is updated and then attempt to redirect it. */\n    useEffect(() => {\n        setRedirectTo(null)\n        resolvePathname()\n    }, [pathname])\n\n    /* This effect will reset the redirect value when it unmounts. */\n    useEffect(() => {\n        return () => {\n            setRedirectTo(null)\n        }\n    }, [])\n\n    // If the component should redirect, then redirect, otherwise go to the next step of displaying the article.\n    return ( redirectTo ? <Redirect to={redirectTo}/> : <DisplayArticle />)\n}\n\nexport default ResolvePathnameWrapper;","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/PageWrapper.js",["265"],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/page-layout/CMSWrapper.js",["266"],"import React, {useEffect} from \"react\";\nimport CMSHeader from \"./CMSHeader\";\n\nimport \"../../../styles/cms-styles.css\"\n\n/* Wrapper for the constant components of the cms Dashboard */\nfunction CMSWrapper(props) {\n    /* Runs on component mount to scroll it into view */\n    useEffect(() => {\n        document.getElementById(\"content-view\").scrollIntoView();\n    }, [])\n\n    return (\n        <>\n            {/* Lazy button\n            <div className=\"site-button\" onClick={(() => {\n                createNewStandardArticle(\"bella.pense@gmail.com\")\n            })}>\n                <p>Create Article</p>\n            </div>\n            */}\n            <CMSHeader />\n            <div id=\"cms-content\">\n                {props.content}\n            </div>\n        </>\n    )\n}\nexport default CMSWrapper;\n","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/PublishSuccess.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/CreateArticle.js",["267","268"],"import React, {useEffect, useState} from \"react\";\nimport { useBeforeunload } from 'react-beforeunload';\n\nimport {useAuth} from \"../../../../contexts/AuthContext\";\n\nimport {\n    createNewDraft,\n    modifyPublishedStandardArticle,\n    publishNewStandardArticle,\n    updateDraft,\n    validateStandardArticleFields\n} from \"./standardArticleLogic\";\nimport CreateArticleFields from \"./CreateArticleFields\";\nimport _ from \"lodash\"\nimport SiteAlert from \"../../misc/SiteAlert\";\n\n/* Styles */\nimport \"../../../../styles/create-classic.css\";\nimport AskBeforeLeaving from \"../../misc/AskBeforeLeaving\";\n\n/**\n * Component for creating a new standard article. To props.existingDraft to load existing\n * draft data to the form to continue editing a draft.\n * @param props\n */\nfunction CreateArticle(props) {\n    /* Store the current user's email/username */\n    const { currentUser } = useAuth();\n    const username = currentUser.email;\n\n    /* State that holds article field information */\n    const [article, setArticle] = useState({\n        title: \"\",\n        author: \"\",\n        authorInfo: \"\",\n        category: {},\n        isFeatured: false,\n        coverPhotoInfo: \"\",\n        coverPhotoDesc: \"\",\n        coverPhotoFile: null,\n        file: null,\n        abstract: \"\",\n        articleBody: \"\",\n    })\n\n    /* State that holds the last saved draft version of the article */\n    const [articleDraft, setArticleDraft] = useState({\n        documentID: \"\",\n        title: \"\",\n        author: \"\",\n        authorInfo: \"\",\n        category: {},\n        isFeatured: false,\n        coverPhotoInfo: \"\",\n        coverPhotoDesc: \"\",\n        coverPhotoFile: null,\n        coverPhotoPathName: \"\",\n        coverPhotoURL: \"\",\n        file: null,\n        abstract: \"\",\n        articleBody: \"\",\n        lastUpdated: \"\",\n    })\n\n    /* State if existing article is being updated */\n    const [publishedArticle, setPublishedArticle] = useState(null)\n    const [prevPublishedArticle, setPrevPublishedArticle] = useState(null)\n\n    /* State to hold field validation errors */\n    const [fieldErrors, setFieldErrors] = useState({\n        title: '',\n        author: '',\n        category: '',\n        abstract: '',\n        articleBody: '',\n        authorInfo: '',\n        coverPhotoDesc: '',\n        coverPhotoFile: ''\n    })\n\n    /* State to determine if warnings should be shown */\n    const [showWarnings, setShowWarnings] = useState(true)\n\n    /* Site alert state for displaying custom popup/prompt */\n    const [alertPopup, setAlertPopup] = useState({\n        showAlert: false,\n        alertType: 'loading',\n        isLoading: true,\n        alertTitle: \"\",\n        alertMessage: \"\",\n    })\n\n    /* Function to clear/reset field alerts */\n    const resetFieldAlerts = () => {\n        setFieldErrors({\n            title: '',\n            author: '',\n            category: '',\n            abstract: '',\n            articleBody: '',\n            authorInfo: '',\n            coverPhotoDesc: '',\n            coverPhotoFile: ''\n        })\n    }\n\n    /* Shows warning before page is reloaded if there are unsaved changes */\n    useBeforeunload(() => {\n        if (hasUnsavedChanges() && showWarnings) {\n            return \"Unsaved changes will be lost, would you like to continue?\"\n        }\n    });\n\n    /* Function that checks to see if there are any unsaved changes */\n    const hasUnsavedChanges = () => {\n        if (props.publishedArticle) {\n            return !(_.isEqual(publishedArticle, prevPublishedArticle))\n        }\n        const prevSave = (({ documentID, coverPhotoPathName, coverPhotoURL, lastUpdated, ...o }) => o)(articleDraft)\n        return !(_.isEqual(prevSave, article))\n    }\n\n    /* Function that will set loading alert */\n    const setLoadingAlert = (alertTitle) => {\n        setAlertPopup({\n            showAlert: true,\n            alertType: \"loading\",\n            isLoading: true,\n            alertTitle: alertTitle,\n            alertMessage: \"\"\n        })\n    }\n\n    /* Function that handles publishing an article */\n    const handlePublishArticle = () => {\n        // Close the confirmation popup\n        document.getElementById(\"popup-close-button\").click()\n        // Attempt to publish article & show loading alert\n        setLoadingAlert(\"Publishing article...\")\n        // Validate input\n        if (validateStandardArticleFields(setFieldErrors, article)) {\n            // Fields have been validated and the article can be published now\n             publishNewStandardArticle(article, articleDraft, username).then(() => {\n                 setShowWarnings(false)\n                 setAlertPopup((prevState => ({\n                     ...prevState,\n                     showAlert: false\n                 })))\n                 window.location.href = \"/cms-dashboard/publish-content-success\"\n            })\n        } else {\n            // Field validation failed\n            setAlertPopup((prevState => ({\n                ...prevState,\n                isLoading: false,\n                alertTitle: \"Error\",\n                alertMessage: \"Please fill out all required fields.\"\n            })))\n        }\n    }\n\n    /* Function that handles publishing changes to an already published article */\n    const handlePublishArticleChanges = () => {\n        // Close the confirmation popup\n        document.getElementById(\"popup-close-button\").click()\n        // Check if changes have actually been made\n        if (_.isEqual(prevPublishedArticle, publishedArticle)) {\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"No changes to publish\",\n                alertMessage: \"\"\n            })))\n            return\n        }\n        // Attempt to publish article & show loading alert\n        setLoadingAlert(\"Publishing changes...\")\n        // Validate input\n        if (validateStandardArticleFields(setFieldErrors, publishedArticle)) {\n            // Fields have been validated and the article can be published now\n            modifyPublishedStandardArticle(publishedArticle.documentID, publishedArticle, username).then(() => {\n                setShowWarnings(false)\n                setAlertPopup((prevState => ({\n                    ...prevState,\n                    showAlert: false\n                })))\n                window.location.href = \"/cms-dashboard/publish-content-success\"\n            })\n        } else {\n            // Field validation failed\n            setAlertPopup((prevState => ({\n                ...prevState,\n                isLoading: false,\n                alertTitle: \"Error\",\n                alertMessage: \"Please fill out all required fields.\"\n            })))\n        }\n    }\n\n    /* Function that handles missing title error for drafts */\n    const handleMissingTitleError = () => {\n        setFieldErrors(prevState => ({\n            ...prevState,\n            title: 'Title is required to save an article as a draft.'\n        }))\n        setAlertPopup((prevState => ({\n            ...prevState,\n            showAlert: true,\n            alertType: \"alert\",\n            alertTitle: \"Error\",\n            alertMessage: \"The article must have a title to be saved as a draft.\"\n        })))\n    }\n\n    /* Function that handles when there is a title clash error for saving drafts! */\n    const handleTitleClashError = () => {\n        // Stretch goal: give user option to overwrite/delete this existing draft\n        setAlertPopup((prevState => ({\n            ...prevState,\n            isLoading: false,\n            alertTitle: \"Error saving draft\",\n            alertMessage: \"An article draft already exists with this title.\"\n        })))\n\n        setFieldErrors(prevState => ({\n            ...prevState,\n            title: `Another draft already exists with this title.\n            ${articleDraft.title ? `Previous article title for this draft was: ${articleDraft.title}` : \"\" }`\n        }))\n    }\n\n    /* Function that updates the article draft */\n    const handleUpdateArticleDraft = (draftID, coverPhotoPathName, coverPhotoURL, dateTime, alertMessage) => {\n        setAlertPopup((prevState => ({\n            ...prevState,\n            isLoading: false,\n            alertTitle: \"Draft saved\",\n            alertMessage: alertMessage\n        })))\n        setArticleDraft({\n            documentID: draftID,\n            title: article.title.trim(),\n            author: article.author,\n            authorInfo: article.authorInfo,\n            category: article.category,\n            isFeatured: article.isFeatured,\n            coverPhotoInfo: article.coverPhotoInfo,\n            coverPhotoDesc: article.coverPhotoDesc,\n            coverPhotoFile: article.coverPhotoFile,\n            coverPhotoPathName: coverPhotoPathName,\n            coverPhotoURL: coverPhotoURL,\n            file: article.file,\n            abstract: article.abstract,\n            articleBody: article.articleBody,\n            lastUpdated: dateTime,\n        })\n    }\n\n    /* Function that handles saving an article as draft */\n    const handleSaveDraft = async () => {\n        // Close the popup button now\n        document.getElementById(\"popup-close-button\").click()\n        // Check if changes have actually been made\n        if (!hasUnsavedChanges()) {\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"No changes to save\",\n                alertMessage: \"\"\n            })))\n            return\n        }\n        // Clear existing field errors\n        resetFieldAlerts()\n        // Validate that the article has a title\n        if (!article.title.trim()) {\n            // Notify user that they must enter title for the article and close popup\n            handleMissingTitleError()\n            return\n        }\n        // Attempt to save the draft now & show loading alert\n        setLoadingAlert(\"Saving draft...\")\n        // If a previous version of a draft exists - then it will be updated\n        if (articleDraft.documentID) {\n            // Update the existing draft - fails if the title is changed to an existing one.\n            updateDraft(article, articleDraft, username).then(([coverPhotoPathName, coverPhotoURL, dateTime]) => {\n                // Update the state of articleDraft\n                handleUpdateArticleDraft(articleDraft.documentID, coverPhotoPathName, coverPhotoURL,\n                    dateTime, \"Article draft has been updated.\")\n            }, (reason) => {\n                if (reason.name === \"title\") {\n                    // Stretch goal: give user option to overwrite/delete this existing draft\n                    // DraftID of existing is in reason.value\n                    handleTitleClashError()\n                } else {\n                    // A different error occurred\n                    setAlertPopup((prevState => ({\n                        ...prevState,\n                        isLoading: false,\n                        alertTitle: \"Error saving draft\",\n                        alertMessage: `Draft could not be saved due to: ${reason.value}`\n                    })))\n                }\n            })\n        } else {\n            // Create a new draft\n            createNewDraft(article, username).then(([draftID, coverPhotoPathName, coverPhotoURL, dateTime]) => {\n                // Update the state of articleDraft\n                handleUpdateArticleDraft(draftID, coverPhotoPathName, coverPhotoURL,\n                    dateTime, \"Article draft has been created.\")\n            }, (reason) => {\n                if (reason.name === \"title\") {\n                    // Stretch goal: give user option to overwrite/delete this existing draft from here\n                    // DraftID of existing is in reason.value\n                    handleTitleClashError()\n                } else {\n                    // A different error occurred\n                    setAlertPopup((prevState => ({\n                        ...prevState,\n                        isLoading: false,\n                        alertTitle: \"Error saving draft\",\n                        alertMessage: `Draft could not be saved due to: ${reason.value}`\n                    })))\n                }\n            })\n        }\n    }\n\n    /* Runs on component mount to scroll it into view */\n    useEffect(() => {\n        // Brings fields from existing draft into the form\n        if (props.existingDraft) {\n            setArticle({\n                title: props.existingDraft.title,\n                author: props.existingDraft.author,\n                authorInfo: props.existingDraft.authorInfo,\n                category: props.existingDraft.category,\n                isFeatured: props.existingDraft.isFeatured,\n                coverPhotoInfo: props.existingDraft.coverPhotoInfo,\n                coverPhotoDesc: props.existingDraft.coverPhotoDesc,\n                coverPhotoFile: props.existingDraft.coverPhotoURL ? props.existingDraft.coverPhotoURL : null,\n                file: props.existingDraft.coverPhotoURL ? props.existingDraft.coverPhotoURL : null,\n                abstract: props.existingDraft.abstract,\n                articleBody: props.existingDraft.articleBody,\n            })\n            setArticleDraft({\n                documentID: props.existingDraftID,\n                title: props.existingDraft.title,\n                author: props.existingDraft.author,\n                authorInfo: props.existingDraft.authorInfo,\n                category: props.existingDraft.category,\n                isFeatured: props.existingDraft.isFeatured,\n                coverPhotoInfo: props.existingDraft.coverPhotoInfo,\n                coverPhotoDesc: props.existingDraft.coverPhotoDesc,\n                coverPhotoFile: props.existingDraft.coverPhotoURL ? props.existingDraft.coverPhotoURL : null,\n                coverPhotoPathName: props.existingDraft.coverPhotoPathName,\n                coverPhotoURL: props.existingDraft.coverPhotoURL,\n                file: props.existingDraft.coverPhotoURL ? props.existingDraft.coverPhotoURL : null,\n                abstract: props.existingDraft.abstract,\n                articleBody: props.existingDraft.articleBody,\n                lastUpdated: props.existingDraft.dateTime,\n            })\n        } else if (props.publishedArticle) {\n            setPublishedArticle({\n                documentID: props.publishedArticleID,\n                editorsNote: props.publishedArticle.editorsNote ? props.publishedArticle.editorsNote : \"\",\n                originalCreationDate: props.publishedArticle.originalCreationDate,\n                title: props.publishedArticle.title,\n                author: props.publishedArticle.author,\n                authorInfo: props.publishedArticle.authorInfo,\n                category: props.publishedArticle.category,\n                isFeatured: props.publishedArticle.isFeatured,\n                coverPhotoInfo: props.publishedArticle.coverPhotoInfo,\n                coverPhotoDesc: props.publishedArticle.coverPhotoDesc,\n                coverPhotoURL: props.publishedArticle.coverPhotoURL,\n                abstract: props.publishedArticle.abstract,\n                articleBody: props.publishedArticle.articleBody,\n            })\n            setPrevPublishedArticle({\n                documentID: props.publishedArticleID,\n                editorsNote: props.publishedArticle.editorsNote ? props.publishedArticle.editorsNote : \"\",\n                originalCreationDate: props.publishedArticle.originalCreationDate,\n                title: props.publishedArticle.title,\n                author: props.publishedArticle.author,\n                authorInfo: props.publishedArticle.authorInfo,\n                category: props.publishedArticle.category,\n                isFeatured: props.publishedArticle.isFeatured,\n                coverPhotoInfo: props.publishedArticle.coverPhotoInfo,\n                coverPhotoDesc: props.publishedArticle.coverPhotoDesc,\n                coverPhotoURL: props.publishedArticle.coverPhotoURL,\n                abstract: props.publishedArticle.abstract,\n                articleBody: props.publishedArticle.articleBody,\n            })\n        }\n    }, [])\n\n    return (\n        <div className=\"create-classic\" id=\"create-classic\">\n\n            <AskBeforeLeaving hasUnsavedChanges={hasUnsavedChanges}/>\n            <SiteAlert\n                showAlert={alertPopup.showAlert}\n                alertType={alertPopup.alertType}\n                isLoading={alertPopup.isLoading}\n                alertTitle={alertPopup.alertTitle}\n                message={alertPopup.alertMessage}\n                onConfirm={() => setAlertPopup(prevState => ({\n                    ...prevState,\n                    showAlert: false\n                }))}\n            />\n            {publishedArticle ?\n                <>\n                    <h1>Edit Published Classic Post</h1>\n                    <CreateArticleFields\n                        article={publishedArticle}\n                        setArticle={setPublishedArticle}\n                        handlePublishArticle={handlePublishArticleChanges}\n                        modifyExisting={true}\n                        fieldErrors={fieldErrors}\n                    />\n                </> :\n                <>\n                    <h1>Create a Classic Post</h1>\n                    <CreateArticleFields\n                        article={article}\n                        draftFileName={articleDraft.coverPhotoPathName}\n                        setArticle={setArticle}\n                        handleSaveDraft={handleSaveDraft}\n                        handlePublishArticle={handlePublishArticle}\n                        fieldErrors={fieldErrors}\n                    />\n                </>\n            }\n        </div>\n    );\n}\n\nexport default CreateArticle;","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/ConfigureAdvertisement.js",["269"],"import React, {useEffect, useState} from \"react\"\n\nimport {useBeforeunload} from \"react-beforeunload\";\nimport {useAuth} from \"../../../contexts/AuthContext\";\nimport CustomPrompt from \"../misc/CustomPrompt\";\nimport ConfirmationPopup from \"../misc/ConfirmationPopup\";\nimport SiteAlert from \"../misc/SiteAlert\";\nimport {fetchCurrentAd, updateCustomAd} from \"./manageAdvertisingLogic\";\n\n/* Placeholder Images */\nimport placeholderSquare from \"../../../images/default-image-square.png\"\nimport placeholderBanner from \"../../../images/default-image-banner.jpg\"\n\n/* Styles */\nimport \"../../../styles/configure-advertising.css\"\n\n/**\n * Component for configuring one of the custom ads in the CMS. Takes the ad type as a prop.\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction ConfigureAdvertisement(props) {\n    /* Store the current user's email/username */\n    const { currentUser } = useAuth();\n    const username = currentUser.email;\n\n    /* State for the ad */\n    const [ad, setAd] = useState({\n        file: null,\n        imageURL: \"\",\n        desc: \"\",\n        link: \"\",\n    })\n\n    /* Initial ad for diffing changes made */\n    const [initialAd, setInitialAd] = useState({\n        documentID: \"\",\n        imagePath: \"\",\n        imageURL: \"\",\n        desc: \"\",\n        link: \"\",\n    })\n\n    /* Site alert state for displaying custom popup/prompt */\n    const [alertPopup, setAlertPopup] = useState({\n        showAlert: false,\n        alertType: 'loading',\n        isLoading: true,\n        alertTitle: \"\",\n        alertMessage: \"\",\n        confirm: () => {\n            setAlertPopup(prevState => ({\n                ...prevState,\n                showAlert: false\n            }))\n        },\n        cancel: () => {\n            setAlertPopup(prevState => ({\n                ...prevState,\n                showAlert: false\n            }))\n        }\n    })\n\n    /* State to determine if warnings should be shown */\n    const [showWarnings, setShowWarnings] = useState(true)\n\n    /* Shows warning before page is reloaded if there are unsaved changes */\n    useBeforeunload(() => {\n        if (hasUnsavedChanges() && showWarnings) {\n            return \"Unsaved changes will be lost, would you like to continue?\"\n        }\n    });\n\n    /* Variables specific to the ad type */\n    let adType\n    let placeholderAd\n    switch (props.advertisement) {\n        case \"site-banner\":\n            adType = \"Site Banner Ad\"\n            placeholderAd = placeholderBanner\n            break\n        case \"article\":\n            adType = \"Article Ad\"\n            placeholderAd = placeholderBanner\n            break\n        case \"sidebar\":\n            adType = \"Sidebar Ad\"\n            placeholderAd = placeholderSquare\n    }\n\n    /* Function that determines if there are unsaved changes */\n    const hasUnsavedChanges = () => {\n        return (\n            initialAd.desc !== ad.desc || initialAd.imageURL !== ad.imageURL || initialAd.link !== ad.link)\n    }\n\n    /* Function that validates that an ad has a description and a link */\n    const validateAd = () => {\n        if (ad.file) {\n            return (ad.desc.trim().length && ad.link.trim().length)\n        } else {\n            return true\n        }\n    }\n\n    /* Function to publish ad changes */\n    const handlePublish = () => {\n        setAlertPopup(prevState => ({\n            ...prevState,\n            showAlert: true,\n            alertType: \"loading\",\n            isLoading: true,\n            alertTitle: \"Publishing ad changes...\",\n            alertMessage: \"\"\n        }))\n        updateCustomAd(ad, initialAd, props.advertisement, username).then(() => {\n            setShowWarnings(false)\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: false\n            })))\n            window.location.href = '/cms-home/publish-content-success'\n        })\n    }\n\n    /* Function to handle publishing ad changes */\n    const confirmPublish = () => {\n        // Close popup\n        document.getElementById(\"popup-close-button\").click()\n        if (!hasUnsavedChanges() || (!initialAd.imageURL && !ad.file)) {\n            // No changes to publish\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"No changes to publish\",\n                alertMessage: \"\",\n                confirm: () => {\n                    setAlertPopup(prevState => ({\n                        ...prevState,\n                        showAlert: false\n                    }))\n                }\n            })))\n        } else if (!validateAd()) {\n            // Ad is not valid\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"Error\",\n                alertMessage: \"Ad description and ad link are required.\",\n                confirm: () => {\n                    setAlertPopup(prevState => ({\n                        ...prevState,\n                        showAlert: false\n                    }))\n                }\n            })))\n        } else if (!ad.file) {\n            // The ad spot is set to be empty\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"confirmation\",\n                alertTitle: \"Set ad spot to be empty?\",\n                alertMessage: \"\",\n                confirm: () => {\n                    handlePublish()\n                }\n            })))\n        } else {\n            handlePublish()\n        }\n    }\n\n    /* Runs on component mount to scroll it into view */\n    useEffect(() => {\n        document.getElementById(\"content-view\").scrollIntoView();\n    }, [])\n\n    /* Gets ad data if it is needed */\n    useEffect(() => {\n        if (props.advertisement && !initialAd.documentID) {\n            fetchCurrentAd(props.advertisement).then((currentData) => {\n                setInitialAd({\n                    documentID: currentData.docID,\n                    imagePath: currentData.ad.imagePath,\n                    imageURL: currentData.ad.imageURL,\n                    desc: currentData.ad.desc,\n                    link: currentData.ad.linkURL,\n                })\n                setAd({\n                    file: currentData.ad.imagePath,\n                    imageURL: currentData.ad.imageURL,\n                    desc: currentData.ad.desc,\n                    link: currentData.ad.linkURL,\n                })\n            })\n        }\n    }, [props.advertisement, initialAd.documentID])\n\n    // Get the current ads\n    return (\n        <div className=\"configure-advertisement\">\n            <CustomPrompt shouldShow={hasUnsavedChanges} />\n            <SiteAlert\n                showAlert={alertPopup.showAlert}\n                alertType={alertPopup.alertType}\n                isLoading={alertPopup.isLoading}\n                alertTitle={alertPopup.alertTitle}\n                message={alertPopup.alertMessage}\n                onConfirm={alertPopup.confirm}\n                onCancel={alertPopup.cancel}\n            />\n            <h1>Configure {adType}</h1>\n            <hr/>\n            <div className=\"current-advertisement\">\n                {/* Ad image */}\n                <div className=\"section center\">\n                    <h2>{adType}</h2>\n                    <img className={`${props.advertisement}-ad`} src={ad.imageURL ? ad.imageURL : placeholderAd} alt={\"placeholder for ad\"} />\n                    <hr />\n                    <span className=\"set-image\">\n                    <input\n                        style={{display: \"none\"}}\n                        type=\"file\"\n                        name=\"ad-image\"\n                        id=\"upload-ad-image\"\n                        accept=\"image/*\"\n                        onChange={(event) => {\n                            if (event.target.files[0]) {\n                                setAd(prevState => ({\n                                    ...prevState,\n                                    file: event.target.files[0],\n                                    imageURL: URL.createObjectURL(event.target.files[0]),\n                                }))\n                            }\n                        }}\n                    />\n                    <div>\n                        <div className=\"site-button\" onClick={() => {\n                            document.getElementById(\"upload-ad-image\").click()\n                        }}>\n                            <p>Upload Image</p>\n                        </div>\n                        <p className=\"file-name\">{ad.file ? ad.file.name ? ad.file.name : ad.file : \"No file uploaded.\"}</p>\n                    </div>\n                    <ConfirmationPopup\n                        triggerIcon={<div\n                            id=\"delete-icon\"\n                            className=\"icon\"\n                        >\n                            <i className=\"fas fa-trash-alt fa-2x\"/>\n                        </div>}\n                        prompt={\"Delete ad image?\"}\n                        triggerIconText={\"\"}\n                        onClickAction={() => {\n                            setAd(prevState => ({\n                                ...prevState,\n                                file: null,\n                                imageURL: \"\",\n                            }))\n                            document.getElementById(\"popup-close-button\").click()\n                        }}\n                    />\n                    </span>\n                    <p className=\"help-text\">\n                        <i>\n                            Tip: To ensure the ad will not be blocked by AdBlockers, do not include the word \"ad\" in\n                            the image file name.\n                        </i>\n                    </p>\n                </div>\n                {/* Description for the ad */}\n                <div className=\"section center\">\n                    <label htmlFor=\"ad-desc\">Ad Description</label>\n                    <input\n                        type=\"text\"\n                        name=\"ad-desc\"\n                        id=\"ad-desc\"\n                        value={ad.desc}\n                        onChange={event => {\n                            setAd(prevState => ({\n                                ...prevState,\n                                desc: event.target.value,\n                            }))\n                        }}\n                    />\n                    <p className=\"help-text\">\n                        Description of the ad, this text will be used for those using a screen-reader.\n                        <br/>\n                        <i>\n                            EX: Ad for WSU Athletics.\n                        </i>\n                    </p>\n                </div>\n                {/* Link for the ad */}\n                <div className=\"section center\">\n                    <label htmlFor=\"ad-link\">Ad Link</label>\n                    <input\n                        type=\"text\"\n                        name=\"ad-link\"\n                        id=\"ad-link\"\n                        value={ad.link}\n                        onChange={event => {\n                            setAd(prevState => ({\n                                ...prevState,\n                                link: event.target.value,\n                            }))\n                        }}\n                    />\n                    <p className=\"help-text\">\n                        Link that the user will be taken to when they click on the advertisement.\n                    </p>\n                </div>\n                <hr />\n                {/* Publish changes */}\n                <div className=\"submit-section\">\n                    <ConfirmationPopup\n                        triggerIcon={<div\n                            id=\"publish-icon\"\n                            className=\"icon\"\n                        >\n                            <i className=\"far fa-newspaper fa-7x\"/>\n                        </div>}\n                        prompt={\"Publish changes?\"}\n                        triggerIconText={\"Publish\"}\n                        onClickAction={confirmPublish}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ConfigureAdvertisement;","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/EditExistingStandardArticle.js",["270"],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/ViewDrafts.js",["271"],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/ViewArticles.js",["272"],"import React, {useEffect, useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nimport {deletePublishedArticle} from \"../../article-creation/standard/standardArticleLogic\";\nimport {fetchMostRecent} from \"./viewArticlesLogic\";\n\nimport ArticleListContainer from \"../ArticleListContainer\";\nimport SiteAlert from \"../../misc/SiteAlert\";\n\n/* Styles */\nimport \"../../../../styles/modify-existing.css\"\n\n/**\n * Component that handles displaying the most recently published articles for each article type.\n * User can filter between the articles with the article filter buttons on the page. More articles\n * can be loaded until all existing articles are displayed on the page.\n * @returns {JSX.Element}\n * @constructor\n */\nconst ViewArticles = () => {\n    const history = useHistory()\n\n    /* State to hold the most recent for standard article collection */\n    const [standardCollection, setStandardCollection] = useState({\n        name: 'classic-posts',\n        mostRecent: [],\n        lastVisible: null,\n        canLoadMore: true,\n    })\n\n    /* State for showing alert popup */\n    const [alertPopup, setAlertPopup] = useState({\n        showAlert: false,\n        alertType: 'loading',\n        isLoading: true,\n        alertTitle: \"\",\n        alertMessage: \"\",\n    })\n\n    /* Handle editing an articles */\n    const handleEdit = (docID) => {\n        history.push(`/cms-dashboard/edit-published-article/${docID}`)\n    }\n\n    /* Handle deleting a multimedia or standard article */\n    const handleDelete = (collection, setCollection, docID, article) => {\n        // Close the popup\n        document.getElementById(\"popup-close-button\").click()\n        // Show the loading alert\n        setAlertPopup({\n            showAlert: true,\n            alertType: \"loading\",\n            isLoading: true,\n            alertTitle: \"Deleting article...\",\n            alertMessage: \"\"\n        })\n        // Delete the article\n        deletePublishedArticle(collection, docID, article).then(() => {\n            // Remove the article from the list of articles\n            const updatedArticles = collection.mostRecent.filter((article) => article[0] !== docID)\n            setCollection(prevState => ({\n                ...prevState,\n                mostRecent: updatedArticles,\n            }))\n            // If the deleted article was the last one, then load more.\n            if (!updatedArticles.length) {\n                fetchMostRecent(collection, setCollection)\n            }\n            // Update the loading alert\n            setAlertPopup(prevState => ({\n                ...prevState,\n                isLoading: false,\n                alertTitle: \"Article deleted.\",\n                alertMessage: \"\"\n            }))\n        }, (reason) => {\n            // Update the loading alert and alert user of failure\n            setAlertPopup(prevState => ({\n                ...prevState,\n                isLoading: false,\n                alertTitle: \"Error deleting article.\",\n                alertMessage: `Article could not be deleted due to: ${reason.value}`\n            }))\n        })\n    }\n\n    /* On component mount fetch the initial most recent articles. */\n    useEffect(() => {\n        if (!standardCollection.mostRecent.length) {\n            fetchMostRecent(standardCollection, setStandardCollection)\n        }\n        document.getElementById(\"content-view\").scrollIntoView()\n    }, [])\n\n    return(\n        <div className=\"modify-existing\">\n            <SiteAlert\n                showAlert={alertPopup.showAlert}\n                alertType={alertPopup.alertType}\n                isLoading={alertPopup.isLoading}\n                alertTitle={alertPopup.alertTitle}\n                message={alertPopup.alertMessage}\n                onConfirm={() => setAlertPopup(prevState => ({\n                    ...prevState,\n                    showAlert: false\n                }))}\n            />\n            <h1>Existing Posts</h1>\n            <hr/>\n            <div className=\"page-container\">\n                <ArticleListContainer\n                    articles={standardCollection.mostRecent}\n                    handleLoadMore={() => fetchMostRecent(standardCollection, setStandardCollection)}\n                    handleEdit={(docID) => handleEdit(docID)}\n                    handleDelete={(docID, article) => handleDelete(standardCollection, setStandardCollection, docID, article)}\n                    canLoadMore={standardCollection.canLoadMore}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default ViewArticles;","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/SelectAdvertisement.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/EditPageContent.js",["273","274"],"/* Licensing for GNU General Public License 2.0 or greater */\n/*  The South End is a Website and CMS to publish news articles\n    Copyright (C) 2021  The South End\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport React, {useEffect, useState} from \"react\"\nimport {useBeforeunload} from \"react-beforeunload\";\n\nimport {getCurrentPageContent, publishContentChanges} from \"./editPageLogic\";\nimport {getDisplayDate} from \"../../site/siteLogic\";\n\nimport AdvancedEditor from \"../article-creation/AdvancedEditor\";\nimport ToolTipPopup from \"../misc/ToolTipPopup\";\nimport SiteAlert from \"../misc/SiteAlert\";\n\nimport SitePage from \"../../site/pages/SitePage\";\n\nimport \"../../../styles/edit-page.css\"\n\n/**\n * All the business logic for editing page content. Takes in the pageURL for the page to be modified.\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nconst EditPageContent = (props) => {\n\n    /* States for page content */\n    const [currentPageData, setCurrentPageData] = useState(null)\n    const [updatedPageContent, setUpdatedPageContent] = useState(null)\n\n    /* State to determine if warnings should be shown */\n    const [showWarnings, setShowWarnings] = useState(true)\n\n    /* Site alert state for displaying custom popup/prompt */\n    const [alertPopup, setAlertPopup] = useState({\n        showAlert: false,\n        alertType: 'loading',\n        isLoading: true,\n        alertTitle: \"\",\n        alertMessage: \"\",\n    })\n\n    /* Function that returns true if there are unsaved changes on the page */\n    const hasUnsavedChanges = () => currentPageData[1].content !== updatedPageContent\n\n    /* Shows warning before page is reloaded if there are unsaved changes */\n    useBeforeunload(() => {\n        if (hasUnsavedChanges() && showWarnings) {\n            return \"Unsaved changes will be lost, would you like to continue?\"\n        }\n    })\n\n    /* Handles publishing changes made to the page */\n    const handlePublishChanges = () => {\n        // Close the popup button\n        document.getElementById(\"popup-close-button\").click()\n\n        if (!hasUnsavedChanges()) {\n            // If there are no unsaved changes then there are no changes to publish\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"No changes to publish.\",\n                alertMessage: \"\"\n            })))\n        } else {\n            if (currentPageData[0]) {\n                // Make sure page content is not set to be empty\n                if (!updatedPageContent.trim().length) {\n                    setAlertPopup((prevState => ({\n                        ...prevState,\n                        isLoading: false,\n                        alertTitle: \"Error\",\n                        alertMessage: \"Page content cannot be empty.\"\n                    })))\n                }\n                // Set loading alert\n                setAlertPopup({\n                    showAlert: true,\n                    alertType: \"loading\",\n                    isLoading: true,\n                    alertTitle: \"Publishing changes...\",\n                    alertMessage: \"\"\n                })\n                // Update changes\n                publishContentChanges(currentPageData[0], updatedPageContent).then(() => {\n                    setAlertPopup((prevState => ({\n                        ...prevState,\n                        showAlert: false\n                    })))\n                    setShowWarnings(false)\n                    window.location.href = '/cms-dashboard/publish-content-success'\n                }, () => {\n                    setAlertPopup((prevState => ({\n                        ...prevState,\n                        isLoading: false,\n                        alertTitle: \"Error\",\n                        alertMessage: \"An error occurred when attempting to update page content.\"\n                    })))\n                })\n            }\n        }\n    }\n\n    /* Handles reverting changes that have been made */\n    const handleRevert = () => {\n        document.getElementById(\"popup-close-button\").click()\n        if (currentPageData[1].content === updatedPageContent) {\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"No changes have been made.\",\n                alertMessage: \"\"\n            })))\n        } else {\n            setUpdatedPageContent(currentPageData[1].content)\n            setAlertPopup((prevState => ({\n                ...prevState,\n                showAlert: true,\n                alertType: \"alert\",\n                alertTitle: \"Changes have been reverted.\",\n                alertMessage: \"\"\n            })))\n            window.scroll({\n                top: 275,\n                behavior: 'smooth'\n            });\n        }\n    }\n\n    /* Get current page data when the component mounts */\n    useEffect(() => {\n        if (!currentPageData) {\n            getCurrentPageContent(props.page.path).then(({docID, content}) => {\n                setCurrentPageData([docID, content])\n            })\n        }\n    }, [])\n\n    /* Set the updated page content if the currentPage data is modified */\n    useEffect(() => {\n        if (!updatedPageContent && currentPageData) {\n            setUpdatedPageContent(currentPageData[1].content)\n        }\n    }, [currentPageData])\n\n    /* Returns display date for the lastModified date */\n    function lastModifiedDate() {\n        if (currentPageData) {\n            const [date] = currentPageData[1].lastModified.split(\"@\")\n            return getDisplayDate(date)\n        }\n        return \"\"\n    }\n\n    return (\n        currentPageData ? (\n            <>\n                <SiteAlert\n                    showAlert={alertPopup.showAlert}\n                    alertType={alertPopup.alertType}\n                    isLoading={alertPopup.isLoading}\n                    alertTitle={alertPopup.alertTitle}\n                    message={alertPopup.alertMessage}\n                    onConfirm={() => setAlertPopup(prevState => ({\n                        ...prevState,\n                        showAlert: false\n                    }))}\n                />\n                <div className=\"edit-page-content\">\n                    <h1>Edit {props.page.name}</h1>\n                    <div className='update-info'>\n                        <p>\n                            <i className=\"fas fa-info-circle\"/>\n                            <span className=\"info\"> Last Updated on {lastModifiedDate()}</span>\n                        </p>\n                    </div>\n                    <SitePage\n                        isPreview={true}\n                        page={props.page}\n                        pageContent={updatedPageContent}\n                    />\n                    <div className=\"editor\">\n                        <AdvancedEditor\n                            setContent={setUpdatedPageContent}\n                            initialContent={updatedPageContent}\n                            helpText={\"The content of a page can contain images, Tweets, YouTube videos, and more.\"}\n                        />\n                    </div>\n                    <hr/>\n                    <h2>Finished?</h2>\n                    <div className=\"options-section\">\n                        <div className=\"revert-changes\">\n                            <ToolTipPopup\n                                triggerIcon={<div\n                                    id=\"revert-icon\"\n                                    className=\"icon\"\n                                >\n                                    <i className=\"fas fa-history fa-7x\"/>\n                                </div>}\n                                prompt={\"Revert changes?\"}\n                                triggerIconText={\"Revert Changes\"}\n                                onClickAction={handleRevert}\n                            />\n                        </div>\n                        <div className=\"publish-changes\">\n                            <ToolTipPopup\n                                triggerIcon={<div\n                                    id=\"publish-icon\"\n                                    className=\"icon\"\n                                >\n                                    <i className=\"far fa-newspaper fa-7x\"/>\n                                </div>}\n                                prompt={\"Publish changes?\"}\n                                triggerIconText={\"Publish Changes\"}\n                                onClickAction={handlePublishChanges}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </>) :\n            <div className=\"loading\">\n                <h2>Fetching current page data...</h2>\n                <div className=\"lds-ellipsis\">\n                    <div/>\n                    <div/>\n                    <div/>\n                    <div/>\n                </div>\n            </div>\n    );\n}\n\nexport default EditPageContent","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/EditExistingDraft.js",["275"],"import React, {useEffect, useState} from \"react\"\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport {fetchDraftFromDocID} from \"../../article-creation/standard/standardArticleLogic\";\nimport CreateArticle from \"../../article-creation/standard/CreateArticle\";\n\nfunction EditExistingDraft () {\n    const { pathname } = useLocation()\n    const history = useHistory()\n\n    const [draft, setDraft] = useState(null)\n\n    /* Runs on component mount to make sure that the article draft ID is valid */\n    useEffect(() => {\n        if (!draft) {\n            // Pull the docID off of the pathname and try to match it to an article.\n            const path = pathname.split(\"/\")\n            const docID = path.pop()\n            fetchDraftFromDocID(docID).then((draft) => {\n                // If it exists then save the data\n                setDraft([docID, draft])\n            }, () => {\n                // If the draft doesn't exist then redirect\n                history.push(\"/cms-home/create-article/standard\")\n            })\n        }\n    }, [])\n\n    return (draft ?\n        <CreateArticle\n            existingDraftID={draft[0]}\n            existingDraft={draft[1]}\n        />\n        : <div>\n            <div className=\"loading\">\n                <div className=\"lds-ellipsis\">\n                    <div/>\n                    <div/>\n                    <div/>\n                    <div/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditExistingDraft","/Users/bellapense/WebstormProjects/a-blog/src/services/firebase.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/siteFetchDataLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/standardArticleLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/siteLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/SiteAlert.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/editPageLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/AdvancedEditor.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/articles/viewArticlesLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/ArticleListContainer.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/article-creation/standard/CreateArticleFields.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/drafts/viewDraftsLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/manage-advertising/manageAdvertisingLogic.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/cmsLogic.js",["276"],"/**\n * THIS FILE CONTAINS COMMON FUNCTIONS AND LOGIC USED THROUGHOUT THE CMS\n */\n\nimport firebase from \"firebase\";\n\n/**\n * Returns the URL pathname for a new article from the article's title by filtering out unsafe & reserved\n * characters that may be in the articles title\n * @param title\n * @returns {string}\n */\nconst getArticlePathname = (title) => {\n    const safeChars = /(^[a-zA-Z0-9_-]*$)/\n    let pathname = ''\n    title.trim().split('').forEach(char => {\n        if (safeChars.test(char)) {\n            pathname += char\n        } else {\n            if (char === \" \"){\n                pathname += \"-\"\n            }\n        }\n    })\n    return pathname.toLocaleLowerCase()\n}\n\n/**\n * Returns a dateTime stamp in the format that it is saved in the database for.\n * @returns {string}\n */\nconst getDateTime = () => {\n    const time = new Date().toLocaleTimeString([], { hour12: false })\n    let date = new Date().toLocaleDateString([], { day: '2-digit', month: '2-digit', year: 'numeric' })\n    const [month, day, year] = date.split(\"/\")\n    return year + \"-\" + month + \"-\" + day + \"@\" + time\n}\n\n/**\n * Uploads an image to path specified in imagePathName and returns the download url as a promise after it is uploaded\n * @param imagePathName\n * @param image\n * @returns {Promise<string>}\n */\nconst uploadImage = (imagePathName, image) => {\n    // Root reference to Cloud Storage\n    const storageRef = firebase.storage().ref()\n\n    // Upload task to upload image under path name in storage\n    return new Promise((resolve) => {\n        // Upload task to upload image under path name in storage\n        const uploadTask = storageRef.child(imagePathName).put(image)\n        //Update progress bar\n        uploadTask.on('state_changed',\n            (snapshot) => {\n                // We can do something with the upload progress if we want to.\n                //const percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n            },\n            (error) => {\n                switch (error.code) {\n                    case 'storage/quota-exceeded':\n                        // Quota on your Cloud Storage bucket has been exceeded. Upgrade to paid plan.\n                        console.log(\"Quota on your Cloud Storage bucket has been exceeded. Upgrade to paid plan.\")\n                        break;\n                    case 'storage/unauthorized':\n                        // User is not authorized to upload\n                        console.log(\"Quota on your Cloud Storage bucket has been exceeded. Upgrade to paid plan.\")\n                        break;\n                }\n            },\n            () => {\n                uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n                    resolve(downloadURL)\n                });\n            }\n        );\n    });\n}\n\n/**\n * Will delete the file in Firebase Storage matching the pathname given.\n * @param imagePathName\n * @returns {Promise<unknown>}\n */\nconst deleteImage = (imagePathName) => {\n    const imageRef = firebase.storage().ref().child(imagePathName)\n    // Delete the cover photo\n    return new Promise((resolve, reject) => {\n        imageRef.delete().then(() => {\n            resolve()\n        }).catch((error) => {\n            console.error(\"Error removing document: \", error)\n            reject(\"Error removing cover photo.\")\n        })\n    })\n}\n\nexport {\n    getArticlePathname,\n    getDateTime,\n    uploadImage,\n    deleteImage,\n}","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/FeaturedArticlePreview.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/ArticleCategory.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/ArticleTile.js",["277","278","279","280"],"import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {getDisplayDate} from \"../siteLogic\";\n\n/* Styles */\nimport '../../../styles/article.css';\n\n/**\n * ArticleTile responsively displays a preview for an article. The article tile will either be in the \"Large\" size\n * or the \"Medium\" size. For multimedia articles, tile should have \"multimedia\" css class added.\n * @param props\n * Expected props\n */\nfunction ArticleTile (props) {\n    // Get the display date from the format stored in the database\n    let displayDate\n    if (!props.placeholder) {\n        displayDate = getDisplayDate(props.updated ? props.updated : props.posted)\n    }\n\n    // Placeholder loading version of the large article tile (rectangle shape)\n    const placeholderTileLarge = (<div className=\"placeholder article-tile large\">\n        <div className=\"article-preview\">\n            <div className=\"tile-image-container\">\n                <div className=\"placeholder-image\"/>\n            </div>\n            <div className=\"preview-content\">\n                <h2/>\n                <h2 className=\"half\"/>\n                <p className=\"author-date\"/>\n                <p/>\n                <p/>\n                <p className=\"half\"/>\n            </div>\n        </div>\n    </div>)\n\n    // Placeholder loading version of the large article tile (square shape)\n    const placeholderTileMedium = (<div className=\"placeholder article-tile medium\">\n        <div className=\"preview-header\">\n            <h2/>\n            <h2 className=\"half\"/>\n        </div>\n        <div className=\"article-preview\">\n            <div className=\"tile-image-container\">\n                <div className=\"placeholder-image\"/>\n            </div>\n            <div className=\"preview-content\">\n                <p className=\"author-date\"/>\n                <p/>\n                <p/>\n                <p className=\"half\"/>\n            </div>\n        </div>\n    </div>)\n\n    // Large tile to display if data has loaded\n    const largeTile = (<div className=\"article-tile large\">\n        <Link to={props.articleURL ? props.articleURL : \"/\"} onClick={ (event) => {\n            if(!props.articleURL) {\n                event.preventDefault()\n            }\n        }}>\n        <div className=\"article-preview\">\n            <div className=\"tile-image-container\">\n                <img src={props.coverPhoto} alt={props.coverPhotoDesc}/>\n                {props.numberPhotos ? <div className=\"number-photos\">\n                    <p>{props.numberPhotos} <i className=\"far fa-images\"/></p>\n                </div> : null}\n            </div>\n            <div className=\"preview-content\">\n                <h2>{props.articleTitle}</h2>\n                <p className=\"author-date\">{props.author ? \"By \" + props.author + \" - Updated\" : \"\"} {displayDate}</p>\n                <p className=\"preview-text\">{props.previewText}</p>\n            </div>\n        </div>\n        </Link>\n    </div>)\n\n    // Medium tile if data has been loaded\n    const mediumTile = (<div className=\"article-tile medium\">\n        <Link to={props.articleURL ? props.articleURL : \"/\"} onClick={ (event) => {\n            if(!props.articleURL) {\n                event.preventDefault()\n            }\n        }}>\n        <div className=\"preview-header\">\n            <h2>{props.articleTitle}</h2>\n        </div>\n        <div className=\"article-preview\">\n            <div className=\"tile-image-container\">\n                <img src={props.coverPhoto} alt={props.coverPhotoDesc}/>\n                {props.numberPhotos ? <div className=\"number-photos\">\n                    <p>{props.numberPhotos} <i className=\"far fa-images\"/></p>\n                </div> : null}\n            </div>\n            <div className=\"preview-content\">\n                <p className=\"author-date\">{props.author ? \"By \" + props.author + \" - Updated\" : \"\"} {displayDate}</p>\n                <p className=\"preview-text\">{props.previewText}</p>\n            </div>\n        </div>\n        </Link>\n    </div>)\n\n    // Group the \"real\" tiles\n    const tiles = <>\n        {largeTile}\n        {mediumTile}\n    </>\n\n    // Group the placeholder tiles\n    const placeholderTiles = <>\n        {placeholderTileLarge}\n        {placeholderTileMedium}\n    </>\n\n    return (\n        <>\n            {props.placeholder ? placeholderTiles : tiles}\n        </>\n    );\n}\n\nexport default ArticleTile;","/Users/bellapense/WebstormProjects/a-blog/src/components/cms/page-layout/CMSHeader.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Navigation.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Sidebar.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Footer.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/DisplayArticle.js",["281"],"import React, {useEffect, useState} from \"react\";\nimport {withStore} from \"../../../hocs/dataStore\";\nimport {useLocation, Redirect} from \"react-router-dom\";\n\nimport Article from \"./Article\";\nimport ArticleTile from \"./ArticleTile\";\n\n/**\n * Component that handles displaying a standard article and related previews based on the current pathname.\n * Redirects to 404 if no article exists.\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction DisplayArticle(props) {\n    /* Get the current pathname */\n    const { pathname } = useLocation()\n\n    /* States that store article data, related articles, or if the page should redirect */\n    const [matchedArticle, setMatchedArticle] = useState(null)\n    const [relatedArticles, setRelatedArticles] = useState([])\n    const [shouldRedirect, setShouldRedirect] = useState(false)\n\n    /* Function that handles requesting article data from the data store. */\n    const getArticle = () => {\n        // Request getting the article from URL from the datastore\n        props.store.getArticleFromURL(pathname, \"classic-posts\").then((match) => {\n            // If we found a match, grab the related articles for it\n            if (match) {\n                let related = []\n                props.store[match.category.path].mostRecent.forEach(article => {\n                    if (article.articleURL !== match.articleURL) {\n                        related.push(article)\n                    }\n                })\n                // Set matched article, related previews to re-render & replace placeholder or previous article\n                setMatchedArticle(match)\n                setRelatedArticles(related)\n            } else {\n                // If no article was matched, then set the redirect to true\n                setShouldRedirect(true)\n            }\n        })\n    }\n\n    /* This effect runs when the pathname changes, or the store updates with data. */\n    useEffect(() => {\n        // If initial data has been loaded, then attempt to get the article\n        if (props.store[\"/most-recent\"]) {\n            getArticle()\n        }\n    }, [pathname, props.store])\n\n\n    // Convert related articles to list of previews\n    let relatedArticlePreviews = null\n    if (relatedArticles.length) {\n        relatedArticlePreviews = relatedArticles.map((article, index) => {\n            return (<div key={`related-article-${index}`}>\n                <ArticleTile\n                    coverPhoto={article.coverPhotoURL}\n                    coverPhotoDesc={article.coverPhotoDesc}\n                    isFeatured={article.isFeatured}\n                    articleTitle={article.title}\n                    author={article.author}\n                    posted={article.dateTime.split(\"@\")[0]}\n                    previewText={article.abstract}\n                    articleURL={article.articleURL}\n                />\n            </div>)\n        })\n    }\n\n    /* Set the custom ad if one exists\n    *\n    let articleAd = null\n    if (props.store[\"/most-recent\"]) {\n        if (props.store[\"article\"].imageURL) {\n            articleAd = {\n                imageURL: props.store[\"article\"].imageURL,\n                linkURL: props.store[\"article\"].linkURL,\n                desc: props.store[\"article\"].desc,\n            }\n        }\n    }\n    * */\n\n\n    return (\n        <>\n            {matchedArticle ?\n                <div>\n                    <Article\n                        articleTitle={matchedArticle.title}\n                        isFeatured={matchedArticle.isFeatured}\n                        coverPhoto={matchedArticle.coverPhotoURL}\n                        coverPhotoDesc={matchedArticle.coverPhotoDesc}\n                        author={matchedArticle.author}\n                        posted={matchedArticle.originalCreationDate}\n                        updated={matchedArticle.dateTime.split(\"@\")[0]}\n                        editorsNote={matchedArticle.editorsNote}\n                        articleBody={matchedArticle.articleBody}\n                        authorInfo={matchedArticle.authorInfo}\n                        coverPhotoInfo={matchedArticle.coverPhotoInfo}\n                        category={matchedArticle.category}\n                    />\n                    <div className=\"related-article-previews\">\n                        <hr/>\n                        <h2>Related Articles</h2>\n                        <hr/>\n                        {relatedArticlePreviews}\n                    </div>\n                </div> : shouldRedirect ? <Redirect to=\"/error-404-page-not-found\" /> : <Article placeholder={true}/>\n            }\n        </>\n    )\n}\n\nexport default withStore(DisplayArticle);","/Users/bellapense/WebstormProjects/a-blog/src/components/site/custom-ads/SiteBannerAd.js",[],["282","283"],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/modify-existing/ArticleListItem.js",["284","285"],"import React from \"react\"\n\nimport ConfirmationPopup from \"../misc/ConfirmationPopup\";\n\n/**\n * Component for a multimedia or standard article that appears with the edit and/or delete button for that article.\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction ArticleListItem(props) {\n    return (props.placeholder ?\n            <div className=\"article-list-item\">\n                <div className=\"item-image\">\n                    <div className=\"image\"/>\n                </div>\n                <div className=\"item-info\">\n                    <div className=\"content\">\n                        <h3/>\n                        <h3 className=\"half\"/>\n                        <p/>\n                    </div>\n                </div>\n                <div className=\"item-actions\">\n                    {props.canEdit ? <i className=\"fas fa-pencil-alt fa-3x\"/> : null }\n                    <i className=\"fas fa-trash-alt fa-3x\"/>\n                </div>\n            </div>\n        : <div className=\"article-list-item\">\n            <div className=\"item-image\">\n                <img src={props.coverPhotoUrl} alt={props.coverPhotoDesc} />\n                {props.numberPhotos ? <div className=\"number-photos\">\n                    <p>{props.numberPhotos} <i className=\"far fa-images\"/></p>\n                </div> : null}\n            </div>\n            <div className=\"item-info\">\n                <div className=\"content\">\n                    <h3>{props.title}</h3>\n                    <p>{props.updatedDate}{props.author ? ` - ${props.author}` : \"\"}</p>\n                </div>\n            </div>\n            <div className=\"item-actions\">\n                {props.handleEdit ?\n                <ConfirmationPopup\n                    triggerIcon={<div\n                        id=\"edit-icon\"\n                        className=\"icon\"\n                    >\n                        <i className=\"fas fa-pencil-alt fa-3x\"/>\n                    </div>}\n                    prompt={`${props.isDraft ? \"Edit draft?\": \"Edit article?\"}`}\n                    triggerIconText={\"\"}\n                    onClickAction={props.handleEdit}\n                /> : null }\n                <ConfirmationPopup\n                    triggerIcon={<div\n                        id=\"delete-icon\"\n                        className=\"icon\"\n                    >\n                        <i className=\"fas fa-trash-alt fa-3x\"/>\n                    </div>}\n                    prompt={`${props.isDraft ? \"Delete draft?\": \"Delete article?\"}`}\n                    triggerIconText={\"\"}\n                    onClickAction={props.handleDelete}\n                    danger={true}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ArticleListItem","/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/Article.js",["286","287","288"],"import React, {useEffect} from \"react\"\n\nimport ReactHtmlParser from \"react-html-parser\"\nimport {appendTwitterScript, setLinkAttributes, getDisplayDate, findAndReplaceEmail, addArticleAd} from \"../siteLogic\"\nimport {Link} from \"react-router-dom\";\n\n/* Styles */\nimport \"../../../styles/article.css\"\nimport {CATEGORIES} from \"../../../constants\";\nimport SharePostOptions from \"./SharePostOptions\";\n\n/**\n *\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Article (props) {\n    /* Effect runs on mount */\n    useEffect(() => {\n            const article = document.getElementById(\"article\")\n            // Append script for displaying tweets\n            appendTwitterScript(article)\n            // Add attributes to links that force them to open in a new tab\n            setLinkAttributes(article)\n    }, [])\n\n    /* Effect runs when article body is initialized and ads the the article ad if one exists\n    useEffect(() => {\n        if (props.articleAd) {\n            // If there is an article ad to add then add the ad\n            const articleBody = document.getElementById(\"article-body\")\n            addArticleAd(articleBody, props.articleAd)\n        }\n    }, [props.articleBody, props.articleAd])\n    * */\n\n\n    // Converts the date to display form off of the format stored in the database\n    let displayPostDate\n    let displayUpdatedDate\n    if (!props.placeholder) {\n        displayUpdatedDate = getDisplayDate(props.updated)\n        displayPostDate = getDisplayDate(props.posted)\n    }\n\n    let postCategory = null\n    if (props.category && props.category.name) {\n        CATEGORIES.forEach((category) => {\n            if (category.path === props.category.path) {\n                postCategory = (<div className=\"article-category\">\n                    {props.isPreview ? <p>{category.icon} {category.name}</p>\n                        : <Link to={category.path}>{category.icon} {category.name}</Link>}\n                </div>)\n            }\n        })\n    }\n\n\n\n    // The placeholder article that displays when the article is loading\n    const placeholderArticle = (<div className=\"placeholder article\" id=\"article\">\n            <h1/>\n            <h1 className=\"half\"/>\n            <div className=\"article-header\">\n                <p className=\"author-date\"/>\n                <div className=\"cover-image section\">\n                    <div className=\"placeholder-image\"/>\n                    <p className=\"half\"/>\n                </div>\n                <div className=\"share-links section\">\n                    <span><i className=\"fab fa-facebook fa-2x\"/></span>\n                    <span><i className=\"fab fa-twitter fa-2x\"/></span>\n                    <span><i className=\"far fa-envelope fa-2x\"/></span>\n                </div>\n            </div>\n            <hr/>\n            <div className=\"article-body\">\n                <p/>\n                <p/>\n                <p/>\n                <p/>\n                <p/>\n                <p className=\"half\"/>\n            </div>\n            <hr/>\n            <div className=\"article-footer\">\n                <div className=\"info section\">\n                    <p/>\n                    <p/>\n                </div>\n                <SharePostOptions isPlaceholder={true}/>\n            </div>\n        </div>)\n\n    // The article itself\n    const article = (<div className=\"article\" id=\"article\">\n        <h1>{props.articleTitle}</h1>\n        <div className=\"article-header\">\n            {postCategory}\n            <p className=\"section author\">\n                By {props.author} on {displayPostDate}\n                {props.updated !== props.posted ? ` - Updated ${displayUpdatedDate}` : ''}\n            </p>\n            <div className=\"cover-image section\">\n                <img src={props.coverPhoto} alt={props.coverPhotoDesc} id=\"article-cover-photo\"/>\n                <p>{props.coverPhotoDesc}</p>\n            </div>\n            <SharePostOptions isPlaceholder={props.placeholder}/>\n        </div>\n        <hr/>\n        <div className=\"article-body\" id=\"article-body\">\n            {props.editorsNote ? <div className=\"editors-note\">{props.editorsNote}</div> : null}\n            {ReactHtmlParser(props.articleBody)}\n        </div>\n        <hr/>\n        <div className=\"article-footer\">\n            <div className=\"info section\">\n                <p dangerouslySetInnerHTML={{__html: props.authorInfo ? findAndReplaceEmail(props.authorInfo) : props.authorInfo}} />\n                {props.coverPhotoInfo ?  <p dangerouslySetInnerHTML={{__html: props.coverPhotoInfo ? findAndReplaceEmail(props.coverPhotoInfo) : \"\"}} /> : null}\n            </div>\n            <SharePostOptions isPlaceholder={props.placeholder}/>\n        </div>\n    </div>)\n\n    return (\n        <>\n            {props.placeholder ? placeholderArticle : article}\n        </>\n    )\n}\n\nexport default Article","/Users/bellapense/WebstormProjects/a-blog/src/components/site/custom-ads/SidebarAd.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/Header.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/constants.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/misc/SocialMedia.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/CMSDashboard.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/CMSOption.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/ToolTipPopup.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/Error404Page.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/edit-pages/SelectPage.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/Home.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/SitePage.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/pages/CategoryPage.js",["289","290"],"import React, {useEffect} from \"react\";\nimport FeaturedArticlePreview from \"../article/FeaturedArticlePreview\";\nimport SubmitYourNews from \"../misc/SubmitYourNews\";\nimport ArticleTile from \"../article/ArticleTile\";\n\n/* Styles */\nimport \"../../../styles/category-page.css\"\n\nimport {withStore} from \"../../../hocs/dataStore\";\n\nfunction CategoryPage(props) {\n\n    useEffect(() => {\n\n    }, [])\n\n    const placeholderArticles = (\n        <>\n            <ArticleTile placeholder={true} />\n            <ArticleTile placeholder={true} />\n            <ArticleTile placeholder={true} />\n            <ArticleTile placeholder={true} />\n            <ArticleTile placeholder={true} />\n        </>\n    )\n\n    let articlesData = []\n    let handleLoadMore = () => {}\n    let canLoadMore = false\n    if (props.store[\"/most-recent\"]) {\n        articlesData = props.store[props.category.path].mostRecent\n        canLoadMore = props.store[props.category.path].canLoadMore\n        canLoadMore ? handleLoadMore = () => {\n            props.store.fetchMoreArticles(props.category.path)\n        } : handleLoadMore = () => {}\n    }\n\n    let featuredPreview = null\n    const articles = (\n        articlesData.map((article, index) => {\n            if (index === 0) {\n                featuredPreview = article\n            } else {\n                return (\n                    <div key={`additional-article-${index}`}>\n                        <ArticleTile\n                            coverPhoto={article.coverPhotoURL}\n                            coverPhotoDesc={article.coverPhotoDesc}\n                            isFeatured={article.isFeatured}\n                            articleTitle={article.title}\n                            author={article.author}\n                            updated={article.dateTime.split(\"@\")[0]}\n                            posted={article.originalCreationDate}\n                            previewText={article.abstract}\n                            articleURL={article.articleURL}\n                        />\n                    </div>\n                )\n            }\n        })\n    )\n\n    return (\n        <div className=\"category-page\">\n            <div className=\"page-header\">\n                <h1>{props.category.name}</h1>\n                <FeaturedArticlePreview featuredPreview={featuredPreview}/>\n            </div>\n\n            <div className=\"page-content\">\n                <div className=\"article-preview-tiles\">\n                    <h2>Recent in {props.category.name}</h2>\n                    {articles.length ? articles : placeholderArticles}\n                    <div className={`site-button ${canLoadMore ? \"\" : \"hidden\"}`} onClick={() => handleLoadMore()}>\n                        <p>Load More</p>\n                    </div>\n                </div>\n            </div>\n        </div>)\n}\n\nexport default withStore(CategoryPage)","/Users/bellapense/WebstormProjects/a-blog/src/components/site/page-layout/BannerCarousel.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/site/article/SharePostOptions.js",[],"/Users/bellapense/WebstormProjects/a-blog/src/components/cms/misc/AskBeforeLeaving.js",["291","292","293"],"import React, {useState} from \"react\"\nimport SiteAlert from \"./SiteAlert\";\n\n// TODO Build this out.\nconst AskBeforeLeaving = (props) => {\n    const [showAlert, setShowAlert] = useState(false)\n\n    return (\n        props.hasUnsavedChanges\n            ? <SiteAlert\n                showAlert={showAlert}\n                alertType={\"confirmation\"}\n                alertTitle=\"Unsaved changes\"\n                message='Your unsaved changes will be lost'\n                onConfirm={() => {setShowAlert(false)}}\n                onCancel={() => {setShowAlert(false)}}\n              />\n              : <></>\n    )\n}\n\nexport default AskBeforeLeaving",{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":5,"column":49,"nodeType":"300","messageId":"301","endLine":5,"endColumn":63},{"ruleId":"302","severity":1,"message":"303","line":19,"column":8,"nodeType":"304","endLine":19,"endColumn":10,"suggestions":"305"},{"ruleId":"302","severity":1,"message":"306","line":72,"column":8,"nodeType":"304","endLine":72,"endColumn":18,"suggestions":"307"},{"ruleId":"302","severity":1,"message":"308","line":17,"column":8,"nodeType":"304","endLine":17,"endColumn":10,"suggestions":"309"},{"ruleId":"298","severity":1,"message":"310","line":5,"column":9,"nodeType":"300","messageId":"301","endLine":5,"endColumn":33},{"ruleId":"298","severity":1,"message":"311","line":16,"column":8,"nodeType":"300","messageId":"301","endLine":16,"endColumn":20},{"ruleId":"302","severity":1,"message":"312","line":398,"column":8,"nodeType":"304","endLine":398,"endColumn":10,"suggestions":"313"},{"ruleId":"314","severity":1,"message":"315","line":79,"column":5,"nodeType":"316","messageId":"317","endLine":91,"endColumn":6},{"ruleId":"302","severity":1,"message":"318","line":26,"column":8,"nodeType":"304","endLine":26,"endColumn":10,"suggestions":"319"},{"ruleId":"302","severity":1,"message":"320","line":97,"column":8,"nodeType":"304","endLine":97,"endColumn":10,"suggestions":"321"},{"ruleId":"302","severity":1,"message":"322","line":93,"column":8,"nodeType":"304","endLine":93,"endColumn":10,"suggestions":"323"},{"ruleId":"302","severity":1,"message":"324","line":154,"column":8,"nodeType":"304","endLine":154,"endColumn":10,"suggestions":"325"},{"ruleId":"302","severity":1,"message":"326","line":161,"column":8,"nodeType":"304","endLine":161,"endColumn":25,"suggestions":"327"},{"ruleId":"302","severity":1,"message":"328","line":26,"column":8,"nodeType":"304","endLine":26,"endColumn":10,"suggestions":"329"},{"ruleId":"314","severity":1,"message":"315","line":60,"column":17,"nodeType":"316","messageId":"317","endLine":69,"endColumn":18},{"ruleId":"330","severity":1,"message":"331","line":28,"column":17,"nodeType":"332","endLine":28,"endColumn":22},{"ruleId":"330","severity":1,"message":"331","line":29,"column":17,"nodeType":"332","endLine":29,"endColumn":39},{"ruleId":"330","severity":1,"message":"331","line":41,"column":13,"nodeType":"332","endLine":41,"endColumn":18},{"ruleId":"330","severity":1,"message":"331","line":42,"column":13,"nodeType":"332","endLine":42,"endColumn":35},{"ruleId":"302","severity":1,"message":"333","line":52,"column":8,"nodeType":"304","endLine":52,"endColumn":31,"suggestions":"334"},{"ruleId":"294","replacedBy":"335"},{"ruleId":"296","replacedBy":"336"},{"ruleId":"330","severity":1,"message":"331","line":19,"column":25,"nodeType":"332","endLine":19,"endColumn":30},{"ruleId":"330","severity":1,"message":"331","line":20,"column":25,"nodeType":"332","endLine":20,"endColumn":47},{"ruleId":"298","severity":1,"message":"337","line":4,"column":86,"nodeType":"300","messageId":"301","endLine":4,"endColumn":98},{"ruleId":"330","severity":1,"message":"331","line":63,"column":13,"nodeType":"332","endLine":63,"endColumn":18},{"ruleId":"330","severity":1,"message":"331","line":64,"column":13,"nodeType":"332","endLine":64,"endColumn":35},{"ruleId":"298","severity":1,"message":"338","line":3,"column":8,"nodeType":"300","messageId":"301","endLine":3,"endColumn":22},{"ruleId":"339","severity":1,"message":"340","line":40,"column":43,"nodeType":"341","messageId":"342","endLine":40,"endColumn":45},{"ruleId":"298","severity":1,"message":"343","line":10,"column":15,"nodeType":"300","messageId":"301","endLine":10,"endColumn":22},{"ruleId":"302","severity":1,"message":"344","line":19,"column":8,"nodeType":"304","endLine":19,"endColumn":10,"suggestions":"345"},{"ruleId":"302","severity":1,"message":"346","line":27,"column":8,"nodeType":"304","endLine":27,"endColumn":47,"suggestions":"347"},"no-native-reassign",["348"],"no-negated-in-lhs",["349"],"no-unused-vars","'fetchCustomAds' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'logout'. Either include them or remove the dependency array.","ArrayExpression",["350"],"React Hook useEffect has a missing dependency: 'resolvePathname'. Either include it or remove the dependency array.",["351"],"React Hook useEffect has a missing dependency: 'props.store'. Either include it or remove the dependency array.",["352"],"'createNewStandardArticle' is defined but never used.","'CustomPrompt' is defined but never used.","React Hook useEffect has missing dependencies: 'props.existingDraft', 'props.existingDraftID', 'props.publishedArticle', and 'props.publishedArticleID'. Either include them or remove the dependency array. If 'setArticleDraft' needs the current value of 'props.existingDraftID', you can also switch to useReducer instead of useState and read 'props.existingDraftID' in the reducer.",["353"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'history', 'pathname', and 'publishedArticle'. Either include them or remove the dependency array.",["354"],"React Hook useEffect has a missing dependency: 'currentUserDrafts'. Either include it or remove the dependency array.",["355"],"React Hook useEffect has a missing dependency: 'standardCollection'. Either include it or remove the dependency array.",["356"],"React Hook useEffect has missing dependencies: 'currentPageData' and 'props.page.path'. Either include them or remove the dependency array.",["357"],"React Hook useEffect has a missing dependency: 'updatedPageContent'. Either include it or remove the dependency array.",["358"],"React Hook useEffect has missing dependencies: 'draft', 'history', and 'pathname'. Either include them or remove the dependency array.",["359"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getArticle'. Either include it or remove the dependency array.",["360"],["348"],["349"],"'addArticleAd' is defined but never used.","'SubmitYourNews' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'unblock' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["361"],"React Hook useEffect has an unnecessary dependency: 'window.location.pathname'. Either exclude it or remove the dependency array. Outer scope values like 'window.location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.",["362"],"no-global-assign","no-unsafe-negation",{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},"Update the dependencies array to be: [history, logout]",{"range":"389","text":"390"},"Update the dependencies array to be: [pathname, resolvePathname]",{"range":"391","text":"392"},"Update the dependencies array to be: [props.store]",{"range":"393","text":"394"},"Update the dependencies array to be: [props.existingDraft, props.existingDraftID, props.publishedArticle, props.publishedArticleID]",{"range":"395","text":"396"},"Update the dependencies array to be: [history, pathname, publishedArticle]",{"range":"397","text":"398"},"Update the dependencies array to be: [currentUserDrafts]",{"range":"399","text":"400"},"Update the dependencies array to be: [standardCollection]",{"range":"401","text":"402"},"Update the dependencies array to be: [currentPageData, props.page.path]",{"range":"403","text":"404"},"Update the dependencies array to be: [currentPageData, updatedPageContent]",{"range":"405","text":"406"},"Update the dependencies array to be: [draft, history, pathname]",{"range":"407","text":"408"},"Update the dependencies array to be: [getArticle, pathname, props.store]",{"range":"409","text":"410"},"Update the dependencies array to be: [history]",{"range":"411","text":"412"},"Update the dependencies array to be: [currentPath]",{"range":"413","text":"414"},[452,454],"[history, logout]",[2750,2760],"[pathname, resolvePathname]",[595,597],"[props.store]",[16188,16190],"[props.existingDraft, props.existingDraftID, props.publishedArticle, props.publishedArticleID]",[1120,1122],"[history, pathname, publishedArticle]",[3268,3270],"[currentUserDrafts]",[3383,3385],"[standardCollection]",[5769,5771],"[currentPageData, props.page.path]",[6004,6021],"[currentPageData, updatedPageContent]",[1047,1049],"[draft, history, pathname]",[2094,2117],"[getArticle, pathname, props.store]",[648,650],"[history]",[884,923],"[currentPath]"]